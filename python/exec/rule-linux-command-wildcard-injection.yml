# yamllint disable
# License: MIT (c) GitLab Inc.
# yamllint enable
---
rules:
  - id: "python_exec_rule-linux-command-wildcard-injection"
    languages:
      - "python"
    message: |
      Detected use of the wildcard character in a system call that spawns a shell. This subjects the
      wildcard to normal shell expansion, which can have unintended consequences if there exist any
      non-standard file names. For instance, a file named `-e sh script.sh` could cause issues when 
      expanded by the shell and executed as a command. Consider using a different method to achieve 
      the same result, such as using the `glob` module to expand the wildcard before passing it to the
      system call. Or if the command is static, consider hardcoding the command instead of using a
      wildcard.

      For example, the below code uses the glob module to expand the wildcard and get a list of all 
      CSV files in the current directory. This list is then used in the subprocess.run call, instead of a 
      wildcard. This avoids the potential issues that can arise from using a wildcard in a system call.
      ```
      import glob
      import subprocess

      # Secure way to process all CSV files
      files = glob.glob('*.csv')
      for file in files:
        subprocess.run(['process_data', file])
      ```

    metadata:
      category: "security"
      cwe: "CWE-155"
      owasp:
        - "A1:2017-Injection"
        - "A03:2021-Injection"
      shortDescription: "Improper neutralization of wildcards or matching symbols"
      security-severity: "High"
    patterns:
      - pattern-either:
          - pattern: |-
              os.$X("$CMD", ...)
          - pattern: |-
              subprocess.Popen("$CMD", shell=True, ...)
      - metavariable-regex:
          metavariable: $CMD
          regex: '(.*?)(\*|\?)'
      - pattern-not-inside: |-
          os.spawnvp(...)
    metavariable-regex:
      X: "(system|popen|popen2|popen3|popen4)"
    severity: "WARNING"
