# yamllint disable
# License: Apache 2.0 (c) gosec
# source (original): https://github.com/securego/gosec/blob/master/rules/directory-traversal.go
# yamllint enable
rules:
- id: "go_injection_rule-ssrf"
  languages:
  - "go"
  mode: taint
  # At the moment we cannot use the function calls both as sources and sinks 
  # (which would be a valid use case for SSRF); this would require the 
  # https://semgrep.dev/docs/writing-rules/experiments/taint-labels/ which is
  # experimental.
  pattern-sources:
  - patterns:
    - pattern-not-inside: |
        import "testing"
        ...
    - pattern-either:
      - pattern: "os.Stdin"
      - pattern: "os.Getenv(...)"
      - pattern: |
          ($REQ: *http.Request).$ANY
      - pattern: |
          ($REQ: http.Request).$ANY
      - patterns:
        - pattern: "($REQ : *http.Request)"
        - pattern-inside: |
            func $FUNC( $W http.ResponseWriter, $R *http.Request, ...) {
              ...
            }
  pattern-sinks:
  - pattern: "http.Head(...)"
  - pattern: "http.Get(...)"
  - pattern: "http.Post(...)"
  - pattern: "http.PostForm(...)"
  - pattern: "http.NewRequest($METHOD,...)"
  - pattern: "http.DefaultClient.Head(...)"
  - pattern: "http.DefaultClient.Get(...)"
  - pattern: "http.DefaultClient.Post(...)"
  - pattern: "http.DefaultClient.PostForm(...)"
  - pattern: "http.NewRequestWithContext($CONTEXT, $METHOD, ...)"
  - pattern: "ftp.Dial(...)"
  - pattern: "ldap.DialURL(...)"
  - pattern: "smtp.Dial(...)"
  - pattern: "retryablehttp.NewRequest($METHOD, ..., $BODY)"
  - patterns:
    - pattern-inside: |
        $C := retryablehttp.NewClient()
        ...
    - pattern-either:
      - pattern: "$C.Get(...)"
      - pattern: "$C.Post(..., $BODYTYPE, $BODY)"
      - pattern: "$C.PostForm(..., $VALS)"
      - pattern: "$C.Head(...)"
  pattern-propagators:
  - pattern: $R := $D.NewDecoder($P)
    from: $P
    to: $R
  - pattern: $S.Decode(&$P)
    from: $S
    to: $P
  - pattern: $S.Decode($P)
    from: $S
    to: $P
  - pattern: $S.Unmarshal($B, &$P)
    from: $B
    to: $P
  - pattern: $S.Unmarshal($B, $P)
    from: $B
    to: $P
  message: |
    Server-Side-Request-Forgery (SSRF) exploits backend systems that initiate requests to third
    parties.
    If user input is used in constructing or sending these requests, an attacker could supply
    malicious
    data to force the request to other systems or modify request data to cause unwanted actions.

    Ensure user input is not used directly in constructing URLs or URIs when initiating requests
    to third party
    systems from back end systems. Care must also be taken when constructing payloads using user
    input. Where
    possible restrict to known URIs or payloads. Consider using a server side map where key's are
    used to return
    URLs such as `https://site/goto?key=1` where `{key: 1, url: 'http://some.url/', key: 2, url:
    'http://...'}`.

    If you must use user supplied input for requesting URLs, it is strongly recommended that the
    HTTP client
    chosen allows you to customize and block certain IP ranges at the network level. By blocking
    RFC 1918
    addresses or other network address ranges, you can limit the severity of a successful SSRF
    attack. Care must
    also be taken to block certain protocol or address formatting such as IPv6.

    If you can not block address ranges at the client level, you may want to run the HTTP client
    as a protected
    user, or in a protected network where you can apply IP Table or firewall rules to block access
    to dangerous
    addresses. Finally, if none of the above protections are available, you could also run a
    custom HTTP proxy
    and force all requests through it to handle blocking dangerous addresses.

    Example HTTP client that disallows access to loopback and RFC-1918 addresses
    ```
    // IsDisallowedIP parses the ip to determine if we should allow the HTTP client to continue
    func IsDisallowedIP(hostIP string) bool {
      ip := net.ParseIP(hostIP)
      return ip.IsMulticast() || ip.IsUnspecified() || ip.IsLoopback() || ip.IsPrivate()
    }

    // SafeTransport uses the net.Dial to connect, then if successful check if the resolved
    // ip address is disallowed. We do this due to hosts such as localhost.lol being resolvable to
    // potentially malicious URLs. We allow connection only for resolution purposes.
    func SafeTransport(timeout time.Duration) *http.Transport {
      return &http.Transport{
        DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {
          c, err := net.DialTimeout(network, addr, timeout)
          if err != nil {
            return nil, err
          }
          ip, _, _ := net.SplitHostPort(c.RemoteAddr().String())
          if IsDisallowedIP(ip) {
            return nil, errors.New("ip address is not allowed")
          }
          return c, err
        },
        DialTLS: func(network, addr string) (net.Conn, error) {
          dialer := &net.Dialer{Timeout: timeout}
          c, err := tls.DialWithDialer(dialer, network, addr, &tls.Config{})
          if err != nil {
            return nil, err
          }

          ip, _, _ := net.SplitHostPort(c.RemoteAddr().String())
          if IsDisallowedIP(ip) {
            return nil, errors.New("ip address is not allowed")
          }

          err = c.Handshake()
          if err != nil {
            return c, err
          }

          return c, c.Handshake()
        },
        TLSHandshakeTimeout: timeout,
      }
    }

    func httpRequest(requestUrl string) {
      const clientConnectTimeout = time.Second * 10
      httpClient := &http.Client{
        Transport: SafeTransport(clientConnectTimeout),
      }
      resp, err := httpClient.Get(requestUrl)
      if err != nil {
        log.Fatal(err)
      }
      defer resp.Body.Close()
      // work with resp
    }
    ```

    For more information on SSRF see OWASP:
    https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
  metadata:
    shortDescription: "Server Side Request Forgery (SSRF)"
    cwe: "CWE-918"
    owasp:
    - "A1:2017-Injection"
    - "A10:2021-Server-Side Request Forgery"
    security-severity: "Medium"
    category: "security"
  severity: "WARNING"
